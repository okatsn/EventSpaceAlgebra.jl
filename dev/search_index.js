var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = EventSpaceAlgebra","category":"page"},{"location":"#EventSpaceAlgebra","page":"Home","title":"EventSpaceAlgebra","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for EventSpaceAlgebra.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [EventSpaceAlgebra]","category":"page"},{"location":"#EventSpaceAlgebra.Distance","page":"Home","title":"EventSpaceAlgebra.Distance","text":"Distance is the supertype for all types of \"distance\" on \"GeneralSpace\".\n\nDistance derived from multiple dimensional is beyond the scope of Distance.\nEach concrete struct of GeneralUnit corresponds to the only concrete struct of Distance\n\n\n\n\n\n","category":"type"},{"location":"#EventSpaceAlgebra.Distance-Tuple{Any, Any}","page":"Home","title":"EventSpaceAlgebra.Distance","text":"Distance(value, unit) construct a concrete struct of Distance.\n\nExample\n\nDistance(5, Degree) == AngularDistance(ValueUnit(5, Degree))\n\n# output\n\ntrue\n\n\n\nAdd a new type <: Distance\n\n\"Constructor\" Distance relies on disttype. Following the following steps to add new utilities:\n\nstruct NewDistance <: Distance\n    vu::ValueUnit\nend\nstruct NewDistUnit <: GeneralUnitOrOneOfItsAbstractType end\ndistype(::Type{<:GeneralUnitOrOneOfItsAbstractType}) = NewDistance\n\nSee also: disttype.\n\n\n\n\n\n","category":"method"},{"location":"#EventSpaceAlgebra.GeneralSpace","page":"Home","title":"EventSpaceAlgebra.GeneralSpace","text":"Abstract type GeneralSpace are the supertype for all dimension/coordinate specification concrete structs of ValueUnit, such as Longitude, Latitude and EventTime.\n\n\n\n\n\n","category":"type"},{"location":"#EventSpaceAlgebra.GeneralSpace-Tuple{Type{<:GeneralSpace}, Any, Any}","page":"Home","title":"EventSpaceAlgebra.GeneralSpace","text":"The interface for constructing any concrete type belongs to GeneralSpace.\n\nExample\n\nLongitude(ValueUnit(1, Degree)) == GeneralSpace(Longitude, 1, Degree)\n\n# output\n\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#EventSpaceAlgebra.ValueUnit","page":"Home","title":"EventSpaceAlgebra.ValueUnit","text":"ValueUnit is a simple mutable concrete structure that holds a value and the unit::GeneralUnit of the value.\n\n\n\n\n\n","category":"type"},{"location":"#EventSpaceAlgebra.disttype-Tuple{Type{<:EventSpaceAlgebra.Angular}}","page":"Home","title":"EventSpaceAlgebra.disttype","text":"Function disttype defines the one-to-one correspondance between U::GeneralUnit and T::Distance; it returns the type/constructor T.\n\nList:\n\ndisttype(::Type{<:Angular}) = AngularDistance\ndisttype(::Type{<:EpochTime}) = EpochDuration\n\n\n\n\n\n","category":"method"},{"location":"#EventSpaceAlgebra.sameunit-Tuple{Any, Any}","page":"Home","title":"EventSpaceAlgebra.sameunit","text":"Check if two objects of ValueUnit has the same unit.\n\n\n\n\n\n","category":"method"}]
}
